name: Build and Release Binaries
'on':
  push:
    tags: ['v*.*.*']
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-binaries:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # Linux
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: linux
            arch: armv7
            goos: linux
            goarch: arm
            goarm: '7'

          # macOS
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64

          # Windows
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
            ext: .exe
          - os: windows
            arch: arm64
            goos: windows
            goarch: arm64
            ext: .exe

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
          CGO_ENABLED: 0
        run: |
          output_name="88code_reset-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}"
          go build -a -ldflags="-s -w" -o "$output_name" ./cmd/reset/main.go

          # 创建压缩包
          if [ "${{ matrix.os }}" = "windows" ]; then
            zip "${output_name%.exe}.zip" "$output_name"
          else
            tar czf "${output_name}.tar.gz" "$output_name"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            *.tar.gz
            *.zip
          retention-days: 1

  create-release:
    needs: build-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: binary-*
          merge-multiple: true

      - name: Generate checksums
        working-directory: artifacts
        run: |
          sha256sum *.tar.gz *.zip > SHA256SUMS

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            artifacts/*.tar.gz
            artifacts/*.zip
            artifacts/SHA256SUMS
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release (manual dispatch)
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: manual-${{ github.sha }}
          name: Manual Build ${{ github.sha }}
          files: |
            artifacts/*.tar.gz
            artifacts/*.zip
            artifacts/SHA256SUMS
          generate_release_notes: true
          draft: true
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
